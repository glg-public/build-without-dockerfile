name: Build and push with dynamic dockerfile
description: Generates a dockerfile to build legacy apps
inputs:
  access_key_id:
    required: true
  secret_access_key:
    required: true
  container_version:
    default: 436f00aecb934dc4f91ef95b07581c01352282cb
  ecr_host:
    required: true
  ecr_uri:
    required: true
  orders_name:
    required: true

defaults:
  run:
    shell: bash

runs:
  using: composite
  steps:
    - name: Setup environment
      run: |
        echo AWS_CONTAINER_CREDENTIALS_RELATIVE_URI='' >> $GITHUB_ENV
        echo AWS_REGION=$(cut --delimiter '.' --fields 4 <<< ${{ inputs.ecr_uri }}) >> $GITHUB_ENV
        echo DEPLOY_SSH_KEY_SECRET_NAME=gds/GLGUSER_PRIVATE_KEY >> $GITHUB_ENV
        echo HEADQUARTERS_BRANCH=master >> $GITHUB_ENV
        echo HEADQUARTERS_ORG=glg >> $GITHUB_ENV
        echo HEADQUARTERS_REPO=ec2.starphleet.jobs.headquarters >> $GITHUB_ENV
        echo ORDERS_NAME=${{ inputs.orders_name }} >> $GITHUB_ENV

        BRANCH=$(cut --delimiter '/' --fields 3 <<< "${{ github.ref }}")
        ECR_HOST=$(cut --delimiter '/' --fields 1 <<< "${{ inputs.ecr_uri }}")

        echo BASE_CONTAINER_IMAGE=$ECR_HOST/github/glg/gds-containerize/main >> $GITHUB_ENV
        echo REPOSITORY_URI=$ECR_HOST/github/${{ github.repository }}/$BRANCH >> $GITHUB_ENV
      shell: bash
    - run: env
      shell: bash
    - name: Login to Docker
      shell: bash
      run: |
        AWS_ACCESS_KEY_ID="${{inputs.access_key_id}}" \
        AWS_SECRET_ACCESS_KEY="${{inputs.secret_access_key}}" \
          aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin ${{ inputs.ecr_uri }}
    - name: Create secrets override
      shell: bash
      run: |
        cat <<-EOF >> $(pwd)/secrets
          #!/usr/bin/env bash

          >&2 echo 'custom secrets here'

          function python() {
            :
          }

          function secrets(){
            >&2 echo 'hellow from the other side'
            SECRET=\$(echo "\$@" | perl -pe 's|\s*--awsProfile\s+.*?\s+||' | perl -pe 's|\s*--namespace\s+.*?\s+||')
            THE_VALUE=\$(/a-version-of-cli-that-no-one-touches/aws --region $AWS_REGION secretsmanager get-secret-value --secret-id "$AWS_REGION/\${SECRETS_NAMESPACE}/\${SECRET}" | jq -r '.SecretString')
            if [ -z "\${THE_VALUE}" ]; then
              THE_VALUE=\$(/a-version-of-cli-that-no-one-touches/aws --region $AWS_REGION secretsmanager get-secret-value --secret-id "$AWS_REGION/\${SECRETS_SHARED_NAMESPACE}/\${SECRET}" | jq -r '.SecretString')
            fi
            echo "\${THE_VALUE}"
          }

          function fromJson() {
            echo \${1} | jq -r ".\${2}"
          }

          secrets "\$@"
        EOF

        chmod +x ./secrets
        ls -l
        echo $(pwd)/secrets
        cat secrets
        docker --version
    - name: build image
      run: |
        docker run \
          -i \
          --env ORDERS_NAME \
          --env HEADQUARTERS_BRANCH \
          --env HEADQUARTERS_ORG \
          --env HEADQUARTERS_REPO \
          --env DEPLOY_SSH_KEY_SECRET_NAME \
          --env AWS_CONTAINER_CREDENTIALS_RELATIVE_URI \
          --env AWS_ACCESS_KEY_ID \
          --env AWS_SECRET_ACCESS_KEY \
          --volume /home/runner/work/hq-stale/hq-stale/secrets:/usr/bin/secrets \
          --init \
          --name "build" \
          "${BASE_CONTAINER_IMAGE}:${{ inputs.container_version }}" \
          build
      shell: bash
    - run: |
        docker commit \
          --change 'CMD ["/home/ubuntu/start","web"]' \
          "build" \
          "$ORDERS_NAME"
      shell: bash
    - run: docker tag "$ORDERS_NAME" "$REPOSITORY_URI:latest"
      shell: bash
    # - run: docker tag "$ORDERS_NAME" "$REPOSITORY_URI:$IMAGE_TAG"
